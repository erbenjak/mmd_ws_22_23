The result of the join operation:
[('a', (1, 2)), ('a', (1, 3))]
One can observe that the first values of x is combined with each value from the second 

The result of the sorted operation:
[('1', 3), ('2', 5), ('a', 1), ('b', 2), ('d', 4)]
One can pass a lambda function which is then used for sorting in this case the keys are used

The result of the group_by operation:
[(0, [2, 4, 6, 8]), (1, [1, 3, 5, 7])]
One can how we created two collections one passing the lambda check and one containing all elements which dont.

We choose the random split as the first transform
length of result 1:27
length of result 2:73
We can observe that we roughly get a random split with the wanted distributions

We choose the union as the second transform
[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]
We can see that both input rdd got joined together

We choose the intersect as the third transform
[('f', 6), ('d', 4), ('e', 5), ('g', 7)]
We can see that both input rdd got intersected together

We will show the following actions: first() / take() / count()
For this purpose the combined rdd from above will be used
First:
('f', 6)
Take(3):
[('f', 6), ('d', 4), ('e', 5)]
Count:
4
